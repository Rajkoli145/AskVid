export interface AIResponse {
  content: string;
  confidence: number;
  relevantSegments: any[];
  timestamp?: string;
  isVideoRelated: boolean;
}

class GeminiService {
  private apiKey: string | null = null;
  private transcript: string = '';
  private segments: any[] = [];
  private videoTitle: string = '';
  private videoUrl: string = '';
  private conversationHistory: Array<{role: string, content: string}> = [];

  constructor() {
    this.initializeApiKey();
  }

  private initializeApiKey() {
    // Check localStorage first, then environment variable
    const localStorageKey = localStorage.getItem('askvid_gemini_api_key');
    const envKey = import.meta.env.VITE_GEMINI_API_KEY;
    const globalKey = (window as any).__GEMINI_API_KEY__;

    const apiKey = localStorageKey || globalKey || envKey;
    
    if (apiKey && apiKey.trim() !== '' && apiKey !== 'your_gemini_api_key_here') {
      this.apiKey = apiKey.trim();
      console.log('Gemini API initialized successfully');
    } else {
      console.log('Gemini API key not configured - using fallback responses');
    }
  }

  setVideoContext(transcript: string, segments: any[], title: string, url: string) {
    this.transcript = transcript;
    this.segments = segments;
    this.videoTitle = title;
    this.videoUrl = url;
    // Reset conversation history when new video is loaded
    this.conversationHistory = [];
    console.log('Video context set for Gemini:', { title, segmentCount: segments.length });
  }

  async generateResponse(question: string): Promise<AIResponse> {
    return this.generateDetailedResponse(question);
  }

  async generateDetailedResponse(question: string): Promise<AIResponse> {
    // Re-initialize API key in case it was updated
    this.initializeApiKey();
    
    if (!this.apiKey) {
      return this.getDetailedFallbackResponse(question);
    }

    try {
      // Add user question to conversation history
      this.conversationHistory.push({ role: 'user', content: question });

      const prompt = this.buildDetailedConversationalPrompt(question);
      
      const requestBody = {
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.8, // Higher for more detailed, creative responses
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1200, // Increased for detailed responses
          candidateCount: 1
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      };

      console.log('Sending detailed request to Gemini API...');
      
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${this.apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.error('Gemini API Error Response:', {
          status: response.status,
          statusText: response.statusText,
          error: errorData
        });
        
        if (response.status === 400) {
          throw new Error(`Invalid request: ${errorData.error?.message || 'Please check your API key and request format'}`);
        } else if (response.status === 403) {
          throw new Error('API key invalid or quota exceeded');
        } else if (response.status === 429) {
          throw new Error('Rate limit exceeded - please try again in a moment');
        }
        
        throw new Error(`Gemini API error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);
      }

      const data = await response.json();
      console.log('Gemini detailed API Response received');
      
      if (!data.candidates || data.candidates.length === 0) {
        throw new Error('No response generated by Gemini');
      }

      const candidate = data.candidates[0];
      
      if (candidate.finishReason === 'SAFETY') {
        return {
          content: "I apologize, but I cannot provide a response to that question due to safety guidelines. Please try rephrasing your question or ask something else, and I'll be happy to provide a detailed, helpful response.",
          confidence: 0.5,
          relevantSegments: [],
          isVideoRelated: false
        };
      }

      const generatedText = candidate.content?.parts?.[0]?.text || "I apologize, but I couldn't generate a detailed response at this time. Please try rephrasing your question, and I'll provide a comprehensive answer.";
      
      // Add AI response to conversation history
      this.conversationHistory.push({ role: 'assistant', content: generatedText });
      
      // Keep conversation history manageable (last 20 exchanges)
      if (this.conversationHistory.length > 40) {
        this.conversationHistory = this.conversationHistory.slice(-40);
      }
      
      const isVideoRelated = this.isQuestionVideoRelated(question);
      const relevantSegments = isVideoRelated ? this.findRelevantSegments(question) : [];
      
      return {
        content: generatedText,
        confidence: 0.94,
        relevantSegments,
        timestamp: relevantSegments.length > 0 ? this.formatTimestamp(relevantSegments[0].start) : undefined,
        isVideoRelated
      };

    } catch (error) {
      console.error('Gemini Service Error:', error);
      
      // Provide more specific error messages
      if (error instanceof Error) {
        if (error.message.includes('API key')) {
          return {
            content: "There seems to be an issue with the API key configuration. Please check that your Gemini API key is valid and properly set in Settings. Once configured, I'll be able to provide detailed, comprehensive responses to all your questions.",
            confidence: 0.3,
            relevantSegments: [],
            isVideoRelated: false
          };
        } else if (error.message.includes('quota') || error.message.includes('limit')) {
          return {
            content: "The API quota has been exceeded. Please try again later or check your Gemini API usage limits. I apologize for the inconvenience - once the quota is restored, I'll be able to provide detailed responses again.",
            confidence: 0.3,
            relevantSegments: [],
            isVideoRelated: false
          };
        }
      }
      
      return this.getDetailedFallbackResponse(question);
    }
  }

  private buildDetailedConversationalPrompt(question: string): string {
    const hasVideoContext = this.transcript && this.videoTitle;
    
    let systemContext = `You are an intelligent, knowledgeable AI assistant that provides DETAILED, COMPREHENSIVE, and IN-DEPTH responses. Your goal is to be thorough, educational, and helpful.

RESPONSE STYLE:
- Provide detailed, comprehensive explanations
- Include multiple perspectives and examples when relevant
- Break down complex topics into understandable components
- Use clear structure with logical flow
- Be thorough but engaging and conversational
- Include practical applications and real-world context
- Anticipate follow-up questions and address them proactively

CONVERSATION APPROACH:
- Engage naturally and maintain conversation flow
- Reference previous parts of our conversation when relevant
- Ask thoughtful follow-up questions when appropriate
- Show enthusiasm for learning and helping
- Provide actionable insights and recommendations`;

    if (hasVideoContext) {
      // Truncate transcript to prevent token limit issues
      const maxTranscriptLength = 8000;
      const truncatedTranscript = this.transcript.length > maxTranscriptLength 
        ? this.transcript.substring(0, maxTranscriptLength) + "\n\n[Note: This is a portion of the full transcript for context]"
        : this.transcript;

      systemContext += `

CURRENT VIDEO CONTEXT:
Title: "${this.videoTitle}"
Full Transcript: "${truncatedTranscript}"

When discussing video content:
- Reference specific parts of the transcript with timestamps
- Explain concepts mentioned in the video thoroughly
- Connect video content to broader topics and real-world applications
- Provide additional context and background information
- Analyze the presenter's approach and methodology
- Suggest related topics for further exploration`;
    }

    // Include recent conversation history for context
    let conversationContext = '';
    if (this.conversationHistory.length > 0) {
      const recentHistory = this.conversationHistory.slice(-8); // Last 4 exchanges
      conversationContext = '\n\nCONVERSATION HISTORY:\n' + 
        recentHistory.map(msg => `${msg.role.toUpperCase()}: ${msg.content}`).join('\n\n');
    }

    return `${systemContext}${conversationContext}

CURRENT USER QUESTION: ${question}

Please provide a detailed, comprehensive response that thoroughly addresses the question. If this relates to the video content, reference specific parts and provide timestamps. If it's a general question, provide in-depth information with examples, context, and practical applications. Make your response educational, engaging, and valuable for learning.`;
  }

  private isQuestionVideoRelated(question: string): boolean {
    if (!this.transcript || !this.videoTitle) return false;

    const videoKeywords = [
      'video', 'transcript', 'speaker', 'mentioned', 'discussed', 'explained',
      'said', 'talked about', 'covered', 'example', 'demonstration', 'tutorial',
      'lesson', 'content', 'topic', 'subject', 'timestamp', 'minute', 'second',
      'beginning', 'end', 'middle', 'part', 'section', 'chapter', 'shows', 'teaches'
    ];

    const questionLower = question.toLowerCase();
    const titleWords = this.videoTitle.toLowerCase().split(' ');
    
    // Check for video keywords
    const hasVideoKeywords = videoKeywords.some(keyword => questionLower.includes(keyword));
    
    // Check for title words
    const hasTitleWords = titleWords.some(word => 
      word.length > 3 && questionLower.includes(word)
    );
    
    // Check for transcript content overlap
    const questionWords = questionLower.split(' ').filter(word => word.length > 3);
    const transcriptLower = this.transcript.toLowerCase();
    const hasTranscriptOverlap = questionWords.some(word => 
      transcriptLower.includes(word)
    );

    return hasVideoKeywords || hasTitleWords || hasTranscriptOverlap;
  }

  private findRelevantSegments(question: string): any[] {
    if (!this.segments.length) return [];

    const keywords = this.extractKeywords(question);
    const relevantSegments: { segment: any; score: number }[] = [];

    this.segments.forEach(segment => {
      let score = 0;
      const segmentText = segment.text.toLowerCase();
      
      keywords.forEach(keyword => {
        const keywordLower = keyword.toLowerCase();
        if (segmentText.includes(keywordLower)) {
          // Give higher score for exact matches
          const exactMatches = (segmentText.match(new RegExp(keywordLower, 'g')) || []).length;
          score += exactMatches * 3;
        }
        
        // Also check for partial matches
        if (segmentText.includes(keywordLower.substring(0, Math.max(4, keywordLower.length - 2)))) {
          score += 1;
        }
      });

      if (score > 0) {
        relevantSegments.push({ segment, score });
      }
    });

    return relevantSegments
      .sort((a, b) => b.score - a.score)
      .slice(0, 5) // Increased for more context
      .map(item => item.segment);
  }

  private extractKeywords(question: string): string[] {
    const stopWords = [
      'what', 'how', 'when', 'where', 'why', 'who', 'is', 'are', 'was', 'were',
      'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of',
      'with', 'by', 'about', 'can', 'could', 'would', 'should', 'do', 'does', 'did',
      'this', 'that', 'these', 'those', 'i', 'you', 'he', 'she', 'it', 'we', 'they'
    ];
    
    return question
      .toLowerCase()
      .replace(/[^\w\s]/g, '')
      .split(/\s+/)
      .filter(word => word.length > 2 && !stopWords.includes(word))
      .slice(0, 15); // Increased for better matching
  }

  private formatTimestamp(seconds: number): string {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${String(remainingSeconds).padStart(2, '0')}`;
  }

  private getDetailedFallbackResponse(question: string): AIResponse {
    const isVideoRelated = this.isQuestionVideoRelated(question);
    
    if (isVideoRelated && this.transcript) {
      const relevantSegments = this.findRelevantSegments(question);
      
      if (relevantSegments.length > 0) {
        const primarySegment = relevantSegments[0];
        const additionalContext = relevantSegments.length > 1 
          ? `\n\nAdditional relevant content appears at ${this.formatTimestamp(relevantSegments[1].start)}: "${relevantSegments[1].text}"`
          : '';
        
        return {
          content: `Based on my comprehensive analysis of the video content, I found detailed information at ${this.formatTimestamp(primarySegment.start)}:\n\n"${primarySegment.text}"\n\nThis segment provides valuable insights into your question. The video's approach to this topic demonstrates a thorough understanding of the subject matter, and the explanation builds upon foundational concepts to provide practical, actionable information.${additionalContext}\n\nFor even more detailed AI responses with full conversational capabilities and deeper analysis, please add your Gemini API key in Settings. This will unlock comprehensive discussions, follow-up questions, and in-depth exploration of any topic.`,
          confidence: 0.8,
          relevantSegments,
          timestamp: this.formatTimestamp(primarySegment.start),
          isVideoRelated: true
        };
      } else {
        return {
          content: `I've thoroughly analyzed the video "${this.videoTitle}" but couldn't find specific content directly addressing your particular question in the transcript. However, let me provide some context about what the video does cover.\n\nThe video appears to focus on comprehensive coverage of its main topic, with detailed explanations and practical examples throughout. The presenter takes a methodical approach, building concepts progressively to ensure viewers develop a solid understanding.\n\nTo get the most relevant information for your specific question, I'd recommend asking about:\n- The main themes and concepts discussed in the video\n- Specific methodologies or approaches explained\n- Practical examples and case studies presented\n- Key takeaways and actionable insights\n\nFor unlimited detailed conversations and comprehensive analysis of both video content and any other topics, please add your Gemini API key in Settings to unlock full AI capabilities.`,
          confidence: 0.6,
          relevantSegments: [],
          isVideoRelated: true
        };
      }
    }
    
    // Detailed fallback responses for general questions
    const questionCategory = this.categorizeGeneralQuestion(question);
    const detailedGeneralResponses = {
      technology: [
        `That's an excellent technology question that touches on some fascinating and rapidly evolving areas of the field! Technology topics like this require comprehensive understanding of multiple interconnected factors.\n\nTo provide you with the most detailed and current information, I'd recommend exploring several authoritative sources:\n\n• **Official Documentation**: Start with the primary sources from technology providers, which offer the most accurate technical specifications and implementation guidelines\n• **Industry Research**: Consult recent whitepapers and research studies that provide data-driven insights into best practices and emerging trends\n• **Community Resources**: Engage with developer communities, forums, and open-source projects where practitioners share real-world experiences and solutions\n• **Educational Platforms**: Explore structured learning paths that provide both theoretical foundations and hands-on practice\n\nThe technology landscape evolves incredibly rapidly, so it's crucial to seek current information and understand the reasoning behind different approaches. For comprehensive, real-time AI assistance with detailed technical discussions, please add your Gemini API key in Settings to unlock unlimited conversational capabilities.`,
        
        `Your technology question addresses a complex and important area that benefits from thorough analysis and multiple perspectives! Technology decisions often involve intricate trade-offs between performance, scalability, maintainability, and cost.\n\nFor comprehensive understanding, I'd suggest a multi-faceted research approach:\n\n• **Technical Deep-Dives**: Examine the underlying architecture, algorithms, and implementation details\n• **Comparative Analysis**: Study different approaches, their strengths, limitations, and use cases\n• **Real-World Case Studies**: Learn from how organizations have successfully (and unsuccessfully) implemented similar solutions\n• **Future Considerations**: Understand emerging trends and how they might impact current decisions\n\nThe key is developing both technical expertise and strategic thinking to make informed decisions. With a Gemini API key configured in Settings, I could provide detailed technical discussions, code examples, architectural guidance, and help you explore the nuances of complex technology topics in real-time.`
      ],
      
      business: [
        `That's a thoughtful and strategic business question that touches on fundamental aspects of organizational success! Business topics like this require comprehensive analysis of multiple interconnected factors including market dynamics, competitive positioning, operational efficiency, and stakeholder management.\n\nFor thorough business insights, I'd recommend exploring several key areas:\n\n• **Strategic Frameworks**: Study proven business models, strategic planning methodologies, and decision-making frameworks used by successful organizations\n• **Market Intelligence**: Analyze current industry trends, competitive landscapes, and emerging opportunities or threats\n• **Case Study Analysis**: Examine how similar companies have navigated comparable challenges, including both successes and failures\n• **Financial Modeling**: Understand the economic implications and develop scenarios for different strategic approaches\n• **Stakeholder Perspectives**: Consider the viewpoints and interests of customers, employees, investors, and other key stakeholders\n\nBusiness strategy is highly contextual, and successful approaches often require adapting proven principles to specific circumstances. For detailed business discussions, strategic analysis, and comprehensive exploration of business topics, please add your Gemini API key in Settings to unlock full conversational AI capabilities.`,
        
        `Your business question addresses critical strategic considerations that require careful analysis and comprehensive planning! Modern business challenges often involve balancing competing priorities while navigating uncertainty and rapid change.\n\nTo develop a thorough understanding, consider these essential elements:\n\n• **Strategic Analysis**: Conduct comprehensive SWOT analysis, competitive intelligence, and market opportunity assessment\n• **Operational Excellence**: Examine process optimization, resource allocation, and performance measurement systems\n• **Innovation Management**: Explore how to foster creativity, manage change, and stay ahead of market disruptions\n• **Leadership Development**: Understand how to build effective teams, communicate vision, and drive organizational transformation\n• **Risk Management**: Identify potential challenges and develop contingency plans for various scenarios\n\nSuccessful business strategy requires both analytical rigor and creative problem-solving. With full AI capabilities enabled through your Gemini API key in Settings, I could provide detailed strategic analysis, help you explore different scenarios, and engage in comprehensive business discussions tailored to your specific situation.`
      ],
      
      learning: [
        `That's an excellent question about learning and skill development! Effective learning is a sophisticated process that involves understanding cognitive science, motivation psychology, and practical application strategies.\n\nFor comprehensive learning guidance, let me outline key areas to explore:\n\n• **Learning Science**: Understand how memory formation works, the role of spaced repetition, active recall, and the importance of deliberate practice in skill development\n• **Metacognitive Strategies**: Develop awareness of your own learning process, including how to monitor progress, identify knowledge gaps, and adjust strategies accordingly\n• **Environmental Design**: Create optimal learning conditions including physical space, time management, and minimizing distractions\n• **Social Learning**: Leverage communities, mentorship, peer learning, and collaborative problem-solving to accelerate progress\n• **Application-Focused Approach**: Ensure learning translates into practical skills through project-based learning and real-world application\n\nEffective learning is highly individual, and the best approaches often combine multiple strategies tailored to your specific goals, learning style, and circumstances. For detailed learning guidance, personalized study strategies, and comprehensive educational discussions, please add your Gemini API key in Settings to unlock full AI tutoring capabilities.`,
        
        `Your learning question touches on fundamental aspects of how we acquire knowledge and develop expertise! Modern learning science has revealed fascinating insights about optimizing the learning process for both efficiency and long-term retention.\n\nHere's a comprehensive framework for effective learning:\n\n• **Foundation Building**: Establish solid conceptual understanding before moving to advanced topics, using techniques like concept mapping and analogical reasoning\n• **Active Engagement**: Employ strategies like self-explanation, elaborative interrogation, and teaching others to deepen understanding\n• **Distributed Practice**: Spread learning sessions over time rather than cramming, allowing for consolidation and strengthening of neural pathways\n• **Interleaving**: Mix different types of problems or concepts within study sessions to improve discrimination and transfer\n• **Feedback Integration**: Seek regular, specific feedback and use it to guide improvement and identify areas needing attention\n\nThe most effective learners develop meta-learning skills - they learn how to learn more effectively over time. With full AI capabilities through your Gemini API key in Settings, I could provide personalized learning strategies, detailed explanations of complex topics, and ongoing support for your educational journey.`
      ],
      
      general: [
        `That's a fascinating and complex question that deserves thorough exploration! Topics like this often involve multiple perspectives, interdisciplinary connections, and nuanced considerations that benefit from comprehensive analysis.\n\nFor in-depth understanding, I'd recommend approaching this systematically:\n\n• **Foundational Research**: Start with authoritative sources that provide historical context, theoretical frameworks, and established knowledge in the field\n• **Current Developments**: Explore recent research, emerging trends, and contemporary debates that shape current understanding\n• **Multiple Perspectives**: Examine different viewpoints, methodological approaches, and cultural or disciplinary perspectives on the topic\n• **Critical Analysis**: Evaluate evidence quality, identify potential biases, and understand the limitations of current knowledge\n• **Practical Applications**: Consider how theoretical understanding translates into real-world implications and actionable insights\n• **Future Implications**: Think about how current trends might evolve and what questions remain unanswered\n\nComplex topics rarely have simple answers, and the most valuable insights often come from understanding the nuances and interconnections. For detailed exploration of any topic with comprehensive analysis, multiple perspectives, and engaging discussion, please add your Gemini API key in Settings to unlock full conversational AI capabilities.`,
        
        `Your question addresses an important and multifaceted topic that benefits from comprehensive exploration and critical thinking! Complex subjects like this often require examining multiple layers of information, understanding different stakeholder perspectives, and considering both immediate and long-term implications.\n\nHere's a framework for thorough investigation:\n\n• **Contextual Understanding**: Examine the historical background, cultural factors, and environmental conditions that shape the topic\n• **Stakeholder Analysis**: Consider how different groups are affected by and influence the subject matter\n• **Evidence Evaluation**: Assess the quality, reliability, and relevance of available information from various sources\n• **Systems Thinking**: Understand how different elements interact and influence each other within the broader system\n• **Scenario Planning**: Explore potential outcomes and implications under different conditions or assumptions\n• **Ethical Considerations**: Examine the moral and ethical dimensions that may influence decision-making and outcomes\n\nThe goal is developing a nuanced, well-informed perspective that acknowledges complexity while providing actionable insights. With full AI capabilities enabled through your Gemini API key in Settings, I could provide detailed analysis, help you explore different angles, and engage in comprehensive discussions about any topic that interests you.`
      ]
    };
    
    const responseArray = detailedGeneralResponses[questionCategory] || detailedGeneralResponses.general;
    return {
      content: responseArray[Math.floor(Math.random() * responseArray.length)],
      confidence: 0.7,
      relevantSegments: [],
      isVideoRelated: false
    };
  }

  private categorizeGeneralQuestion(question: string): 'technology' | 'business' | 'learning' | 'general' {
    const questionLower = question.toLowerCase();
    
    const techKeywords = ['programming', 'code', 'software', 'technology', 'ai', 'machine learning', 'web development', 'app', 'algorithm', 'database', 'api', 'framework'];
    const businessKeywords = ['business', 'marketing', 'brand', 'startup', 'entrepreneur', 'strategy', 'sales', 'management', 'leadership', 'finance', 'investment'];
    const learningKeywords = ['learn', 'study', 'education', 'skill', 'course', 'tutorial', 'practice', 'training', 'development', 'teaching'];
    
    if (techKeywords.some(keyword => questionLower.includes(keyword))) {
      return 'technology';
    } else if (businessKeywords.some(keyword => questionLower.includes(keyword))) {
      return 'business';
    } else if (learningKeywords.some(keyword => questionLower.includes(keyword))) {
      return 'learning';
    }
    
    return 'general';
  }

  getSuggestedQuestions(): string[] {
    const videoQuestions = [
      "Can you provide a comprehensive analysis of the main topics covered?",
      "What are the detailed key insights and takeaways from this video?",
      "How do the concepts explained relate to current industry practices?",
      "What practical applications and examples are demonstrated?"
    ];

    const generalQuestions = [
      "How does this topic connect to broader industry trends and developments?",
      "What are the most effective strategies and best practices in this area?",
      "Can you explain the underlying principles and theoretical foundations?",
      "What would you recommend for someone looking to master this subject?"
    ];

    // Mix video-specific and general questions
    return [...videoQuestions.slice(0, 2), ...generalQuestions.slice(0, 2)];
  }

  isConfigured(): boolean {
    // Re-check configuration status
    this.initializeApiKey();
    return this.apiKey !== null;
  }

  // Method to clear conversation history
  clearConversationHistory(): void {
    this.conversationHistory = [];
    console.log('Gemini conversation history cleared');
  }

  // Method to get conversation history for debugging
  getConversationHistory(): Array<{role: string, content: string}> {
    return [...this.conversationHistory];
  }
}

export const geminiService = new GeminiService();